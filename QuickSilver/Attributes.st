'From Smalltalk 5.5k XM November 24 on 4 October 1990 at 11:39:12 pm.'\g"AttributeMenu"l15000z20000\gbf5 Class new title: 'AttributeMenu'	subclassof: Menu	fields: 'viewee title extract assign viewer showing underbits'	declare: '';	asFollows\gbf5 AttributeMenus are Menus augmented with:	underbits	the bits of what I cover	viewee		the object whose attributes I show	showing	back-to-front list of indices of visible attriburte viewersThe following fields are Vectors of equal length:	title			a String of text for each menu line	extract		how to get the attribute from the viewee (selector or code)					(can use attributeViewee, attributeValue, attributeMenu)	assign		how to put a new value in the attribute (selector or code)					(can use attributeViewee, attributeValue, attributeMenu)	viewer		a viewer for showing and editing the attributes value					(may be an Attribute- or UnitViewer or another AttributeMenu)I access the following globals:	Smalltalk declare: ↪attributeMenu as: nil.	Smalltalk declare: ↪attributeViewee as: nil.	Smalltalk declare: ↪attributeText as: nil. "AttributeViewer uses"	Smalltalk declare: ↪attributeValue as: nil.	Smalltalk declare: ↪attributeOldValue as: nil.See example for sample definition\giInit\gbf5 assign⦂ a [assign←assign, a]\gb9i1BIassign: a [assign←assign, [ a≡nil ⇒ [] a unique ] ]\gb10Bassign←assign\gbattribute: viewee [self viewee: viewee]\gb18Bcopy | i t [	t←self class init.	t title←title; extract←extract; assign←assign.	for⦂ i to: viewer length do⦂ [t viewer: (viewer◦i) copy].	⇑t ]\gb5B136b2Bextract⦂ e [extract←extract, e]\gb10i1BIextract: e [extract←extract, [ e≡nil ⇒ [] e unique ]]\gb11Bextract←extract\gbinit [	title←Vector new: 0.	extract←Vector new: 0.	assign←Vector new: 0.	viewer←Vector new: 0.	showing←Set default.	self reset. ]\gb5Btitle: t [	[ title≡nil ⇒ [self init] ].	title←title, t.	self stringFromVector: title.	text para flushright. ]\gb9Btitle←title [self stringFromVector: title. text para flushright.]\gb12Bviewee: viewee | i v [	for⦂ i from: showing do⦂ [		(viewer◦i) attribute: (self extractI: i) ] ]\gb20Bviewer: v [ viewer←viewer, v. v≡nil or⦂ v ismenu ⇒ [] showing add: viewer length ]\gb10Bviewer←viewer\gbParts\gbf5 assign [⇑assign]\gb7Battribute [⇑viewee]\gb10Bextract [⇑extract]\gb8Bindex [⇑1+(thisline origin y-text frame origin y / text lineheight)]\gb6B1b60Bismenu "I'm not a leaf"\gb7Bishowing [⇑showing]\gb8B1b8Btext [⇑text]\gbthisline [⇑thisline]\gb9Btitle [⇑title]\gb6Bviewee [⇑viewee]\gb7Bviewer [⇑viewer]\gb7BShow\gbf5 at: pt | i [	self moveto: pt; reset.	for⦂ i from: showing do⦂ [		(viewer◦i) attribute: (self extractI: i); at: (self atI: i) ] ]\gb10BatI: i [⇑frame rightside ⌾ ((i-1)*text lineheight+text frame top)]\gb7B1b57Bcovering: i | j k v  [ "viewer◦i should be showing"	j←showing find: i.	j=0 ⇒ [⇑false] "I'm not showing"	v←viewer◦i.	for⦂ k from: j+1 to: showing length do⦂ [		v intersects: viewer◦(showing◦k) ⇒			[⇑k "index in showing of deepest viewer intersecting over v"] ]	⇑false ]\gb12B10i29I29b6B1i18I98b2B1i56I5b6Bintersects: a | i [	a intersects: frame ⇒ [⇑true]	for⦂ i from: showing do⦂ [		viewer◦i intersects: a ⇒ [⇑true] ].	⇑false ]\gb14B30b5B58b5B6b6Bmoveto: pt | move [ "Move the menu to the new location"	move←pt-text frame origin.	frame moveby: move.	text frame moveby: move.	thisline moveby: move ]\gb11B6i1I2i35Ireset | i "recursive thru showing tree" [	underbits←false.	for⦂ i from: showing do⦂ [(viewer◦i) reset]. ]\gb39Bresetbits [underbits←false]\gb10Breshow [self reset viewee: viewee; show] "redisplay on changed screen"\gb7B33b1Birestorebits [underbits⇒[frame bitsFromString: underbits] ]\gb12Bsavebits [underbits←frame bitsIntoString]\gb9Bshow | i "must at: first" [	[ underbits ⇒ [] self savebits ].	super show.	for⦂ i from: showing do⦂ [(viewer◦i) show]. ]\gb5B3i7b3B7Ishow: viewee at: pt [self viewee: viewee; at: pt; show]\gb20Bshowat: pt [self at: pt; show]\gb11BshowI: i | j k [ "show viewer◦i at top of showing"	showing has: i ⇒ [		(j←self covering: i) ⇒ [ "showing index of first cover"			for⦂ k from: showing length to: j by: ¬1 do⦂ [				(viewer◦(showing◦k)) unshow ].			(viewer◦i) unshow.			for⦂ k from: j to: showing length do⦂ [				(viewer◦(showing◦k)) show ].			showing delete: i; add: i.			(viewer◦i) show. ] ]	showing add: i. "new show"	(viewer◦i) show: (self extractI: i) at: (self atI: i). ]\gb9B88i34I252i10Iunshow | i [	for⦂ i from: showing length to: 1 by: ¬1 do⦂ [		(viewer◦(showing◦i)) unshow].	self restorebits resetbits. ]\gb7BunshowI: i | j k [	showing has: i ⇒ [		[ (j←self covering: i) ⇒ [] j←showing length+1 ].		for⦂ k from: showing length to: j by: ¬1 do⦂ [ (viewer◦(showing◦k)) unshow ].		(viewer◦i) unshow.		for⦂ k from: j to: showing length do⦂ [ (viewer◦(showing◦k)) show ].		showing delete: i. ] ]\gb11Bvisible: i [ showing has: i ⇒ [self covering: i ⇒ [⇑false] ⇑true ] ⇑false ]\gb11B40b6B2b5B3b6BBug/Edit\gbf5 assignI: i | e "Value of attribute i" [	e←assign◦i.	e is: UniqueString⇒[viewee perform: e with: (viewer◦i) attribute]	e≡nil⇒[]	attributeValue←(viewer◦i) attribute.	attributeOldValue←self extractI: i.	attributeViewee←viewee.	attributeMenu←self.	e "sender←thisContext; can kill smalltalk" eval. "remote code" ]\gb11B4i22I218i19I27i13Ibug | r pt left i [	user nobug⇒[⇑false]	[ (r←text frame) has: user mp ⇒ [thisline comp. left←r leftside] ⇑false ].	while⦂ (r has: (pt←user mp)) do⦂ [			user nobug ⇒ [				i←self index.				[ self visible: i ⇒ [self unshowI: i] self showI: i ].				thisline comp.				⇑false. ]			thisline has: pt⇒[ ]			thisline comp;			 moveto: ((text ptofpt: pt) x←left); "follow mouse"			 comp ].	pt x≥r rightside⇒[⇑self edit]	thisline comp. ⇑false ]\gb4B29b6B68b7B157b6B86i14I32b10B17b8BBug | trace i menu index res [	while⦂ ((trace←self has: user mp) or⦂ user anybug) do⦂ [		trace and⦂ user anybug ⇒ [			for⦂ i from: trace length to: 2 by: ¬1 do⦂ [ "root down"				menu←trace◦i◦1. index←trace◦i◦2.				menu indexI: index; showI: index; thisline comp. ].			res←(trace◦1) bug. "does its own comp"			for⦂ i from: 2 to: trace length do⦂ [ "unravel"				menu←trace◦i◦1. index←trace◦i◦2.				menu assignI: index; thisline comp. ].			res ⇒ [⇑true] ] ].	⇑false ]\gb4B159i1I2i11I115i20I41i10I91b5B8b6Bedit | i v res [	self showI: (i←self index).	v←viewer◦i.	[ res←v bug ⇒ [self assignI: i] ].	self thisline comp. ⇑res ]\gb14B101b6BextractI: i | e "Get value of attribute i" [	(e←extract◦i)≡nil⇒[⇑nil]	e class≡UniqueString⇒[⇑viewee perform: e]	attributeViewee←viewee.	attributeMenu←self.	e "sender←thisContext;" eval. "remote code"	⇑attributeValue. ]\gb12B4i26I23b4B25b18B79i13bI19Bflashbug | a [	self showat: user mp-(frame extent/2).	a←self Bug.	self unshow.	⇑a ]\gb12B71b2Bhas: pt | i v res "trace from menu having pt" [	text frame has: pt ⇒ [⇑self inVector "first element is menu with pt"]	for⦂ i from: showing length to: 1 by: ¬1 do⦂ [		(v←viewer◦(showing◦i)) ismenu ⇒ [			(res←v has: pt) ⇒ [⇑(res, (self, (showing◦i))) "later ones have index"] ] ]	⇑false ]\gb17B1i27I26b14Bi32I108b28Bi23I7b6BindexI: i "make self index be i" [	thisline moveto: ((self atI: i) x←text frame leftside). ]\gb10Bi22IExample\gbf5 example"	Here is an example with an AttributeMenu as a viewer for an AttributeMenu	| unitviewer menuviewer originmenu X oldr newr.	unitviewer←UnitViewer default units:		(('micas',1) inVector, ('pts',35.3), ('picas',423.3), ('cm',899.75), ('in',2540.0)).	menuviewer←[AttributeViewer new		menu: [ActionMenu new			stringFromVector: ('white','ltgray','gray','dkgray','black'); init;			action←(white,ltgray,gray,dkgray,black)] ].	originmenu←AttributeMenu init.		originmenu title: 'x';			extract: ↪x; assign: 'x←'; viewer: unitviewer copy.		originmenu title: 'y';			extract: ↪y; assign: 'y←'; viewer: unitviewer copy.	X←AttributeMenu init.		X	title: 'origin⇒';			extract: ↪origin; assign: nil; viewer: originmenu.		X	title: 'color';			extract⦂	[attributeValue←attributeViewee bitsIntoString◦1]; 			assign⦂	[attributeViewee clear: attributeValue];			viewer: menuviewer.	oldr←Rectangle new fromuser. oldr comp. newr←oldr.	user waitbug. X viewee: newr; showat: user mp-(X frame extent/2).	while⦂ (X has: user mp) do⦂ [X bug]. X unshow. oldr comp. newr comp."\gb8B2i73IexampleH"	Here is an example of horizontal attributes display/edit	| unitviewer ptmenu X oldr newr.	unitviewer←UnitViewer default		units: (('pts',1) inVector, ('picas',12), ('in',72.0), ('cm',28.35)).	ptmenu←AttributeHMenu init.		ptmenu title: 'x';			extract: ↪x; assign: 'x←'; viewer: unitviewer copy.		ptmenu title: 'y';			extract: ↪y; assign: 'y←'; viewer: unitviewer copy.	X←AttributeMenu init.		X title: 'origin⇒';			extract: ↪origin; assign: nil; viewer: ptmenu copy.		X title: 'corner⇒';			extract: ↪corner; assign: nil; viewer: ptmenu copy.	oldr←Rectangle new fromuser. oldr comp. newr←oldr copy.	user waitbug. X viewee: newr; showat: user mp.	while⦂ (X has: user mp) do⦂ [X bug]. X unshow. oldr comp. newr comp."\gb9B2i56IexampleV"	Here is an example of vertical attributes display/edit	| unitviewer X oldr newr.	unitviewer←UnitViewer default		units: (('pts',1) inVector, ('picas',12), ('in',72.0), ('cm',28.35)).	X←AttributeMenu init.		X title: 'origin x';			extract: ↪x; assign: 'x←'; viewer: unitviewer copy.		X title: 'origin y';			extract: ↪y; assign: 'y←'; viewer: unitviewer copy.	oldr←Rectangle new fromuser. oldr comp. newr←oldr.	user waitbug. X viewee: (newr origin); showat: user mp.	while⦂ (X has: user mp) do⦂ [X bug]. X unshow. oldr comp. newr comp."\gb9B2i54I\gSystemOrganization classify: ↪AttributeMenu under: 'Attributes'.\g"AttributeHMenu"l15000z20000\gbf5 Class new title: 'AttributeHMenu'	subclassof: AttributeMenu	fields: ''	declare: '';	asFollows\gbf5 I am an AttributeMenu stretched out on one lineI use the following in a non-standard way:	title is now a Set of readonly viewers that display the titles	underbits is now unused (the viewers do their own)	thisline is now an Integer\giInit\gbf5 init [super init. thisline←1.]\gb5Btitle: t [	[ title≡nil ⇒ [self init] ].	title←title, [AttributeViewer new toString: ↪itself; attribute: t]. ]\gb9Btitle←t | s i [	t◦1 is: String ⇒ [for⦂ s from: t do⦂ [self title: s] ]	title←Vector new: t length.	for⦂ i to: t length do⦂ [title◦i ← (t◦i) copy]. ]\gb8BParts\gbf5 index [⇑thisline "I don't really use my menuness"]\gb6B1b9Bi33Ithisline [⇑(title◦thisline) window]\gb9B1b24Bwindow [⇑(title◦1) window origin rect: title last window corner]\gbShow\gbf5 at: pt [(title◦1) at: pt]\gb7BatI: i | w [ w←(title◦i) window. ⇑w rightside⌾w top ]\gb10B23b18Bintersects: a [⇑a intersects: self window]	\gb14B1b26BpastI: i | w [	showing has: i ⇒ [		w←(viewer◦i) window.		⇑w rightside⌾w top ]	⇑(self atI: i)+(2⌾0) ]\gb12B48b18B4b20Brestorebits | t [ for⦂ t from: title do⦂ [t unshow]. ]\gb15Bshow [ (title◦1) show window comp. self showfrom: 1. ]\gb5Bshowfrom: i | j pt [	pt←self atI: i.	for⦂ j from: i to: title length do⦂ [		[	i=j ⇒ []			(title◦j) showat: pt; window comp.			pt←self atI: j. ].		[ showing has: j ⇒ [(viewer◦j) showat: pt] ].		pt←self pastI: j. ]. ]\gb12BshowI: i [	(showing has: i) ⇒ []	self unshowto: i.	showing add: i.	self showfrom: i. ]	\gb9Bunshow [self unshowto: 1. (title◦1) unshow.]\gb7BunshowI: i [	showing has: i ⇒ [		self unshowto: i.		showing delete: i.		self showfrom: i. ] ]\gb11Bunshowto: i | j [	for⦂ j from: title length to: i+1 by: ¬1 do⦂ [		(viewer◦j) unshow.		(title◦j) unshow. ].	(viewer◦i) unshow. ]\gb12BBug/Edit\gbf5 bug | r pt i res w [	user nobug ⇒ [⇑false]	pt←user mp.	for⦂ i to: title length do⦂ [		(r←(title◦i) window) has: pt ⇒ [			r comp.			while⦂ (r has: (pt←user mp)) do⦂ [				user nobug ⇒ [					[ self visible: i ⇒ [self unshowI: i] self showI: i ].					r comp.					⇑false ] ]			pt x≥r rightside ⇒ [				self showI: i; indexI: i.				w←(viewer◦i) window.				res←self edit.				[w≠(viewer◦i) window ⇒ [					(viewer◦i) unshow.					self unshowto: i; showfrom: i. ] ].				⇑res ]			r comp.			⇑false ] ]	⇑false ]\gb12B1b6B17b6B227b6B201b4B17b6B6b6Bflashbug | a [	self showat: user mp-((title◦1) frame extent/2).	a←self Bug.	self unshow.	⇑a ]\gb12B81b2Bhas: pt | i [	for⦂ i to: title length do⦂ [		(title◦i) window has: pt ⇒ [⇑self inVector] ].	⇑false ]\gb12B63b14B6b6BindexI: thisline\gb\gSystemOrganization classify: ↪AttributeHMenu under: 'Attributes'.\g"AttributeViewer"l15000z20000\gbf5 Class new title: 'AttributeViewer'	subclassof: TextImage	fields: 'attribute menu toString fromString underbits'	declare: '';	asFollows\gbf5 AttributeViewers are TextImages augmented with:	attribute		the value I deal with	underbits		the bits of what I cover	For choose-one values:	menu			an ActionMenu to select one of a set of values	For integers, strings, etc:	toString			how to show the value as a String (selector or code)	fromString		how to get the value from a String (selector or code)My code can utilize the globals:	attribueMenu (caller)	attributeViewee (callers viewee)	attributeText (text)	attributeValue\giInit\gbf5 attribute: attribute\gbcopy [⇑(self class copy: self) reset menu: menu copy]\gb5B1b46Bdefault [ "for integers, read/write. start with new me"	self toString: ↪asString;		fromString⦂ [attributeValue←attributeText asStream integerScan asInteger] ]\gb9Bi46bIfromString⦂ fromString\gbfromString: fromString [fromString≡nil ⇒ [] fromString←fromString unique]\gb23Binit [self readonly]\gb5Bmenu: menu\gbreadonly [self toString: ↪asString "for integers, read only. start with new me"]\gb34Bi45bItoString⦂ toString\gbtoString: toString [toString≡nil ⇒ [] toString≡nil ⇒ [] toString←toString unique]\gb19BParts\gbf5 attribute [⇑attribute]\gb10B1b10Bismenu [⇑false] "no subtree here"\gb7B1b6B2iisreadonly [⇑fromString≡nil and⦂ menu≡nil]\gbmenu [⇑menu]\gb5Bpara←para\gbShow\gbf5 at: pt [frame←pt+(2⌾0) rect: pt. self reset.]\gb7Bintersects: a [⇑a intersects: window]\gb14B1b21Breset [underbits←false]\gb6Bresetbits [underbits←false]\gb10Breshow [ self savebits show. ] "redisplay on changed screen"\gb7B23irestorebits [underbits≡nil⇒[] underbits⇒[window bitsFromString: underbits] ]\gb12Bsavebits [underbits←window bitsIntoString]\gb9Bshow [	underbits ⇒ [window clear: white. super show.]	self toString getframe savebits show. ]\gb5Bshow: v at: pt [ self attribute: v; at: pt; show. ]\gb15Bshowat: pt [self at: pt; show]\gbunshow [self restorebits reset]\gb7BEdit\gbf5 bug [⇑self edit]\gb4B1b10Bedit | button c [	self isreadonly ⇒ [⇑false]	self menubug ⇒ [⇑self unshow show "new value"]	fromString≡nil⇒[⇑false "only menu values allowed"]	self unshow editshow.	c←thisContext sender.	while⦂ c receiver≡self do⦂ [c←c sender].	button←c receiver thisline. "in mother AttributeMenu"	while⦂ true do⦂ [		user anybug ⇒ [			frame has: user mp ⇒ []			until⦂ [				frame has: user mp ⇒ [					self menubug ⇒ [⇑self editunshow show]					true ]				user nobug ⇒ [					button has: user mp ⇒ [						self editunshow.						user leftShiftKey ⇒ [self show. ⇑false "abort"]						⇑self fromString show "new value entered" ]					true ]				false ] do⦂ [button flash] ]		super edit: 0. ] ]\gb5B32b8B18b18Bi11I19b7Bi26I118i26I125b21B7i4I112b7Bi7I8b21Bi21I7i5I6i5Ieditshow | w [	self editframe.	w←window inset:¬2.	underbits←w bitsIntoString.	w clear: black. self show. ]\gb13Beditunshow | w [(window inset: ¬2) bitsFromString: underbits. self reset.]\gb15BfromString | i t [	[	menu≡nil ⇒ [] t←para text.		for⦂ i to: menu action length do⦂ [			t=(menu titleI: i) ⇒ [attribute←menu action◦i. ⇑self] ]. ].	fromString class≡UniqueString ⇒ [attribute←para text perform: fromString]	attributeText←para text. "-Menu and -Viewee set up by caller"	fromString eval.	attribute←attributeValue. ]\gb16B121b5B108i37Imenubug | a [	menu≡nil ⇒ [⇑false]	(a←menu flashbug) ⇒ [attribute←a◦3. ⇑true]	⇑false ]\gb8B18b8B38b5B3b6BtoString | i [	[	menu≡nil⇒[]		i←menu action has: attribute.		i ⇒ [para←(menu titleI: i) asParagraph. ⇑self] ].	toString≡nil ⇒ [para←'' asParagraph].	toString is: UniqueString⇒[para←(attribute perform: toString) asParagraph.]	attributeValue←attribute. "-Menu and -Viewee set up by caller"	toString eval.	para←attributeText asParagraph. ]\gb9B249i36IPrivate\gbf5 editframe [self getframe growby: self extra]\gb10Bextra [⇑24⌾0]\gbgetframe | pt [	self paragraph: para frame: (frame corner←(1000⌾1000)) style: DefaultTextStyle.	frame growto: (self maxx: para length+1)+(4⌾0).	frame height←style lineheight.	window←frame origin-(2⌾0) rect: frame corner. ]\gb13Bgrowby: pt [frame growby: pt. window growby: pt.]\gb11B\gSystemOrganization classify: ↪AttributeViewer under: 'Attributes'.\g"UnitViewer"l15000z20000\gbf5 Class new title: 'UnitViewer'	subclassof: Object	fields: '	attribute	"Integer in internal units"				val			"AttributeViewer for value in current units"				units			"AttributeViewer for units choice"				underbits '	declare: '';	asFollows\gbf5 a UnitViewer allows a finite choice of display forms, represented by the name of the unit and the number of fundamental units in this unit, organized in an ActionMenu. The following two displays are for the same field value, assuming that (pts, 1) and (picas, 12) are the menu associations (field value=144):	144 pts				12 picasuse the form (unit, (internal count per unit, display denominator)) to for example display decimal fraction, as for (unit, (72, 100)), which will display 36 points as 0.5 unit\giInit/Access\gbf5 attribute [⇑attribute]\gb10Battribute: attribute\gbcopy | t [	t←self class new.	t	val←val copy; units←units copy; attribute: nil; reset.	⇑t ]\gb5B84b2Bdefault [self readonly. val fromString: ↪itself]\gb8Bexample [] " | colorviewer lengthviewer lengthreader pointviewer pointreader.(colorviewer←AttributeViewer default)	menu: [ActionMenu new stringFromVector: ('white','ltgray','gray','dkgray','black');					init; action←(white, ltgray, gray, dkgray, black) ].lengthviewer←UnitViewer default units: (('pts',1) inVector, ('picas', 12), ('inches', (72,100))).lengthreader←UnitViewer new readonly units: (('pts',1) inVector, ('picas', 12), ('inches', (72,100))).(pointreader←AttributeHMenu init)	title: 'x'; extract: ↪x; assign: 'x←'; viewer: lengthreader copy;	title: 'y'; extract: ↪y; assign: 'y←'; viewer: lengthreader copy.(pointviewer←AttributeHMenu init)	title: 'x'; extract: ↪x; assign: 'x←'; viewer: lengthviewer copy;	title: 'y'; extract: ↪y; assign: 'y←'; viewer: lengthviewer copy.X←AttributeMenu init.X title: 'origin'; extract: ↪origin; assign: 'origin←'; viewer: pointviewer copy.X title: 'corner'; extract: ↪corner; assign: 'corner←'; viewer: pointreader copy.X title: 'width'; extract: ↪width; assign: 'width←'; viewer: lengthviewer copy.X title: 'height'; extract: ↪height; assign: 'height←'; viewer: lengthviewer copy.X title: 'color'; extract: nil;	assign⦂ [attributeViewee clear: attributeValue];	viewer: colorviewer copy.X viewee: Rectangle new fromuser. user waitbug. X showat: user mp-(X frame extent/2).X Bug."\gb8Binit [self default]\gb5Bismenu [⇑false] "no subtree here"\gb7B1b6B2iisreadonly [⇑val isreadonly]\gbmenu: m [val menu: m]\gb8Breadonly [	val←AttributeViewer new toString: ↪itself.	self units: ('', 1) inVector. ]\gb9Bunits [⇑units]\gb6Bunits: u | i v ["u is Vector of form (('unit', n), . . ) where n internal units equal a unit"	v←Vector new: u length.	for⦂ i to: v length do⦂ [v◦i←(u◦i◦1)].	units←AttributeViewer new menu: [ActionMenu new stringFromVector: v].	for⦂ i to: v length do⦂ [v◦i←(u◦i◦2)].	units menu init action←v.	units attribute: units menu state;		toString⦂ [attributeText←(attributeValue◦1 titleI: attributeValue◦2)]. ]\gb15B1i77Iunits←units\gbval [⇑val]\gbval←val\gbwindow [⇑val window origin copy rect: units window corner copy ]\gbShow\gbf5 at: pt [val at: pt]\gb7BfromString | s neg n unit c rem denom [	s←val para asStream.	neg←[s ∢ 025 "¬" ⇒ [true] false].	n←s integerScan asInteger.	unit←units attribute◦3.	[ unit is: Vector ⇒ [unit←unit◦1] ].	[	s ∢ 057 "/" ⇒ [attribute←0. rem←n. denom←s integerScan asInteger.]		attribute←n*unit. rem←0. denom←1.		s ∢ 056 "." ⇒ [			while⦂ [(c←s next) and⦂ (060≤c and⦂ 071≥c)] do⦂ [				rem←rem*10 + c-060. denom←denom*10. ]. ]		while⦂ [(c←s next) and⦂ (060>c or⦂ 071<c)] do⦂ [] "wait for a digit"		s end ⇒ [] s skip: ¬1. rem←s integerScan asInteger.		while⦂ [(c←s next) and⦂ (060>c or⦂ 071<c)] do⦂ []. "normally skips over /"		s skip: ¬1. denom←s integerScan asInteger ].	attribute←attribute + ((rem*unit+(denom/2))/denom). "blem for denom odd"	[ attribute is: Float ⇒ [attribute←attribute round] ].	neg ⇒ [attribute←attribute negated]  ]\gb38B424i18I107i24I100i21Igetframe [val getframe. units at: val window rightside⌾val window top; getframe.]\gb9Bintersects: a [⇑a intersects: self window]\gbreset [underbits←false. val reset. units reset.]\gb6Brestorebits [val restorebits. units restorebits.]\gb12Bshow [self toString getframe. val savebits show. units savebits show.]\gb5B24bi1BIshow: attribute at: pt [self at: pt; show]\gb23Bshowat: pt [self at: pt; show]\gbtoString | a unit rem denom n fraction i [	a←attribute abs. unit←units attribute◦3.	units para←(units menu titleI: (units menu action find: unit)) asParagraph.	[ unit is: Vector ⇒ [denom←unit◦2. unit←unit◦1] denom←unit ].	[ denom is: Float ⇒ [denom←[denom≤10.0 ⇒ [10]; ≤100.0 ⇒ [100]; ≤1000.0 ⇒ [1000] 10000] ] ].	rem←a\unit. n←(a/unit) asInteger.	[ denom=unit ⇒ [] rem←(((rem*denom) asFloat+(unit/2))/unit) asInteger].	[ rem=denom ⇒ [n←n+1. rem←0] ].	while⦂ (denom\10=0 and⦂ rem\10=0) do⦂ [		rem←rem/10. denom←denom/10].	fraction← [		rem=0 ⇒ ['']		denom=10 ⇒ ['.' + rem asString]		denom=100 ⇒ ['.' + [rem<10⇒['0'] ''] + rem asString]		denom=1000 ⇒ ['.' + [rem<10⇒['00'] rem<100⇒['0'] ''] + rem asString]		denom=10000 ⇒ ['.' + [rem<10⇒['000'] rem<100⇒['00'] rem<1000⇒['0'] ''] + rem asString]		for⦂ i from: (2,3,5,7) do⦂ ["reduce p/q for sure if min(p,q)≤120"			while⦂ (rem\i=0 and⦂ denom\i=0) do⦂ [				rem←rem/i. denom←denom/i. ]. ].		' ' + rem asString + '/' + denom asString ].	val para← (		([attribute<0 ⇒ ['¬'] '']) +		n asString +		fraction +		015 inString "cr") asParagraph. ]\gb9B829i37I212i4Iunshow [units unshow. val unshow.]\gb7BEdit\gbf5 bug [⇑self edit]\gb4B1b10Bedit | button a c m old [	val isreadonly ⇒ [		[	(a←units menu flashbug) ⇒ [				a≠units attribute ⇒ [					self unshow. units attribute: a. self show ] ] ].		⇑false ]	old←attribute.	self valmenubug ⇒ [		attribute=old ⇒ [⇑false]		self unshow show. ⇑true]	self unshow editshow.	c←thisContext sender.	while⦂ c receiver≡self do⦂ [c←c sender].	button←c receiver thisline.	while⦂ true do⦂ [		user anybug ⇒ [			val frame has: user mp ⇒ []			units frame has: user mp ⇒ [self unitsbug]			until⦂ [				val frame has: user mp ⇒ [					self valmenubug ⇒ [self editunshow show. ⇑attribute≠old] ]				user nobug ⇒ [					button has: user mp ⇒ [						self editunshow.						[ user leftShiftKey ⇒ [attribute←old] self fromString ].						self show. ⇑attribute≠old] ]				false ] do⦂ [button flash] ]		val edit: 0 ] ]\gb5B156b6B59b6B22b5B322b14B155b14B1i1I6i5Ieditframe [val editframe. units at: val window rightside⌾val window top; getframe.]\gb10Beditshow | w [	self toString editframe.	w←self window inset: ¬2.	underbits←w bitsIntoString.	w clear: black.	val savebits show.	units savebits show. ]\gb13Beditunshow [ (self window inset: ¬2) bitsFromString: underbits. self reset. ]\gb11Bunitsbug | a [	(a←units menu flashbug) ⇒ [		a=units attribute ⇒ []		self editunshow fromString.		units attribute: a.		self editshow. ] ]\gb9Bvalmenubug | a old [	val menu≡nil ⇒ [⇑false]	(a←val menu flashbug) ⇒ [attribute←a◦3. ⇑true]	⇑false ]\gb11B27b6B43b5B1b8B\gSystemOrganization classify: ↪UnitViewer under: 'Attributes'.\g"ViewerSet"l15000z20000\gbf5 Class new title: 'ViewerSet'	subclassof: Dictionary	fields: 'viewer'	declare: '';	asFollows\gbf5 I choose a viewer appropriate to the class of my attribute\giInit/Access\gbf5 copy | v i vs [	v←values class new: values size.	for⦂ i to: values size do⦂ [v◦i ← (values◦i) copy]. "unique viewers"	vs←self class new with: objects values: v.	⇑vs ]\gb13B89i17I46b3Bdefault | lengthviewer pointviewer "a universal viewer" [	super init.	lengthviewer←UnitViewer default		units: (('pts', 1) inVector, ('picas', 12), ('inches', (72,100))).	pointviewer←[ AttributeMenu init		title: 'x'; extract: ↪x; assign: 'x←'; viewer: lengthviewer copy;		title: 'y'; extract: ↪y; assign: 'y←'; viewer: lengthviewer copy ].	self insert: Integer with: AttributeViewer default;		insert: String with: [AttributeViewer new toString: ↪itself; fromString: ↪itself];		insert: Point with: pointviewer copy;		insert: Rectangle with: [ AttributeMenu init			title: 'origin'; extract: ↪origin; assign: 'origin←'; viewer: pointviewer copy;			title: 'corner'; extract: ↪corner; assign: 'corner←'; viewer: pointviewer copy;			title: 'width'; extract: ↪width; assign: 'width←'; viewer: lengthviewer copy;			title: 'height'; extract: ↪height; assign: 'height←'; viewer: lengthviewer copy ]. ]"X←ViewerSet default.X attribute: user mp; flashbug.X attribute: Rectangle new fromuser; flashbug."\gb7i1I27Bi20Ireadonly | lengthviewer pointviewer "a universal readonly viewer" [	super init.	lengthviewer←UnitViewer new readonly 		units: (('pts', 1) inVector, ('picas', 12), ('inches', (72,100))).	pointviewer←[ AttributeMenu init		title: 'x'; extract: ↪x; viewer: lengthviewer copy;		title: 'y'; extract: ↪y; viewer: lengthviewer copy. ].	self insert: Integer with: AttributeViewer default;		insert: String with: [AttributeViewer new toString: ↪itself];		insert: Point with: pointviewer copy;		insert: Rectangle with: [ AttributeMenu init			title: 'origin'; extract: ↪origin; viewer: pointviewer copy;			title: 'corner'; extract: ↪corner; viewer: pointviewer copy;			title: 'width'; extract: ↪width; viewer: lengthviewer copy;			title: 'height'; extract: ↪height; viewer: lengthviewer copy ]. ]\gb8i1I27Bi29Iviewer [⇑viewer]\gbAsViewer\gbf5 at: pt [viewer at: pt]\gb7Battribute [⇑viewer attribute]\gbattribute: a | c [	c←a class.	until⦂ c≡nil do⦂ [		(viewer←self lookup: c) ⇒ [viewer attribute: a. ⇑self]		c←c superclass. ].	viewer←AttributeViewer new readonly attribute: a. "can show anything that can asString"]\gb18B83b5B74i28b8B1Ibug [⇑viewer bug]\gb4B1b11BBug [⇑viewer Bug]\gb4B1b11Bedit [⇑viewer edit]\gb5B1b12Bflashbug [⇑viewer flashbug]\gb9B1b16Bhas: pt [⇑viewer has: pt]\gb8B1b15Bintersects: a [⇑viewer intersects: a]\gb14B1b21Bisreadonly [⇑viewer isreadonly]\gb11B1b18Breset [viewer reset]\gb6Bshow [viewer show]\gb5Bshow: a at: pt [viewer show: a at: pt]\gb15Bshowat: pt [self at: pt; show]\gbunshow [viewer unshow]\gb7Bviewee: v [viewer attribute: v]\gb10B\gSystemOrganization classify: ↪ViewerSet under: 'Attributes'.\g 